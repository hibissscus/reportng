package e2e.tips.reportng;

import org.testng.util.Strings;

import javax.imageio.ImageIO;
import javax.swing.JEditorPane;
import javax.swing.text.Document;
import javax.swing.text.html.HTMLEditorKit;
import javax.swing.text.html.StyleSheet;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

public class HTMLToBase64 {

    static String html = "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n" +
            "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n" +
            "        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n" +
            "<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"\" lang=\"\">\n" +
            "<head>\n" +
            "  <title>Test Results Report - Overview</title>\n" +
            "  <meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\" />\n" +
            "  <meta name=\"description\" content=\"TestNG unit test results.\" />\n" +
            "  <link href=\"reportng.css\" rel=\"stylesheet\" type=\"text/css\" />\n" +
            "  </head>\n" +
            "<body>\n" +
            "<div id=\"meta\">\n" +
            "  Generated by <a href=\"http://www.testng.org\" target=\"_top\">TestNG</a> with <a href=\"http://reportng.dev.java.net\" target=\"_top\">ReportNG</a>\n" +
            "  at 10:45 CET on Tuesday 18 February 2020\n" +
            "  <br /><span id=\"systemInfo\">sstepanov@MacBook-Pro-2.local&nbsp;/&nbsp;Java 1.8.0_192 (Oracle Corporation)&nbsp;/&nbsp;Mac OS X 10.15.3 (x86_64)</span>\n" +
            "</div>\n" +
            "\n" +
            "<h1>Test Results Report</h1>\n" +
            "\n" +
            "<table class=\"overviewTable\">\n" +
            "    <tr>\n" +
            "    <th colspan=\"6\" class=\"header suite\">\n" +
            "      <div class=\"suiteLinks\">\n" +
            "                                      </div>\n" +
            "      e2e\n" +
            "    </th>\n" +
            "  </tr>\n" +
            "  <tr class=\"columnHeadings\">\n" +
            "    <td>&nbsp;</td>\n" +
            "    <th>Duration</th>\n" +
            "    <th>Passed</th>\n" +
            "    <th>Skipped</th>\n" +
            "    <th>Failed</th>\n" +
            "    <th>Pass Rate</th>\n" +
            "  </tr>\n" +
            "  \n" +
            "    <tr class=\"test\">\n" +
            "    <td class=\"test\">\n" +
            "      <a href=\"suite1_test1_results.html\">c</a>\n" +
            "    </td>\n" +
            "    <td class=\"duration\">\n" +
            "      3.886s\n" +
            "    </td>\n" +
            "\n" +
            "        <td class=\"passed\"><span class=\"number\">1</span></td>\n" +
            "    \n" +
            "        <td class=\"zero\"><span class=\"number\">0</span></td>\n" +
            "    \n" +
            "        <td class=\"zero\"><span class=\"number\">0</span></td>\n" +
            "    \n" +
            "    <td class=\"passRate\">\n" +
            "            100.00%\n" +
            "          </td>\n" +
            "  </tr>\n" +
            "    \n" +
            "    <tr class=\"test\">\n" +
            "    <td class=\"test\">\n" +
            "      <a href=\"suite1_test2_results.html\">a</a>\n" +
            "    </td>\n" +
            "    <td class=\"duration\">\n" +
            "      24.939s\n" +
            "    </td>\n" +
            "\n" +
            "        <td class=\"passed\"><span class=\"number\">1</span></td>\n" +
            "    \n" +
            "        <td class=\"skipped\"><span class=\"number\">1</span></td>\n" +
            "    \n" +
            "        <td class=\"failed\"><span class=\"number\">1</span></td>\n" +
            "    \n" +
            "    <td class=\"passRate\">\n" +
            "            33.33%\n" +
            "          </td>\n" +
            "  </tr>\n" +
            "    \n" +
            "    <tr class=\"test\">\n" +
            "    <td class=\"test\">\n" +
            "      <a href=\"suite1_test3_results.html\">b</a>\n" +
            "    </td>\n" +
            "    <td class=\"duration\">\n" +
            "      48.069s\n" +
            "    </td>\n" +
            "\n" +
            "        <td class=\"passed\"><span class=\"number\">7</span></td>\n" +
            "    \n" +
            "        <td class=\"zero\"><span class=\"number\">0</span></td>\n" +
            "    \n" +
            "        <td class=\"failed\"><span class=\"number\">1</span></td>\n" +
            "    \n" +
            "    <td class=\"passRate\">\n" +
            "            87.50%\n" +
            "          </td>\n" +
            "  </tr>\n" +
            "    \n" +
            "    <tr class=\"suite\">\n" +
            "    <td colspan=\"2\" class=\"totalLabel\">Total</td>\n" +
            "\n" +
            "        <td class=\"passed\"><span class=\"number\">9</span></td>\n" +
            "    \n" +
            "        <td class=\"skipped\"><span class=\"number\">1<span></td>\n" +
            "    \n" +
            "        <td class=\"failed\"><span class=\"number\">2<span></td>\n" +
            "    \n" +
            "    <td class=\"passRate\"><span class=\"suite\">75.00%<span></td>\n" +
            "\n" +
            "  </tr>\n" +
            "</table>\n" +
            "</body>\n" +
            "</html>\n";

    private static StyleSheet styleSheet() {
        final StyleSheet styleSheet = new StyleSheet();
        styleSheet.addRule("* {padding: 0; margin: 0;}");
        styleSheet.addRule("a {color: #006699;}");
        styleSheet.addRule("a:visited {color: #003366;}");
        styleSheet.addRule("body {font-family: Lucida Sans Unicode, Lucida Grande, sans-serif; line-height: 1.8em; font-size: 62.5%; margin: 5px}");
        styleSheet.addRule("h1 {font-family: Arial, Helvetica, sans-serif; font-weight: bold; font-size: 1.8em; margin-bottom: 0.6667em;}");
        styleSheet.addRule("h2 {font-family: Arial, Helvetica, sans-serif; font-weight: bold; font-size: 1.8em; margin-bottom: 0.6667em;}");
        styleSheet.addRule("p {font-size: 1.8em;}");
        styleSheet.addRule("td {font-size: 1.8em;}");
        styleSheet.addRule(".header {font-size: 1.8em; font-weight: bold; text-align: left;}");
        styleSheet.addRule(".passed {background-color: #44aa44;}");
        styleSheet.addRule(".skipped {background-color: #ffaa00;}");
        styleSheet.addRule(".failed {background-color: #ff4444;}");
        styleSheet.addRule(".failedConfig {background-color: #800000; color: #ffffff}");
        styleSheet.addRule(".skippedConfig {background-color: #cc6600; color: #ffffff}");
        styleSheet.addRule(".totalLabel {font-weight: bold; background-color: #ffffff;}");
        styleSheet.addRule(".suite {background-color: #999999; font-weight: bold;}");
        styleSheet.addRule(".test {background-color: #eeeeee; padding-left: 2em;}");
        styleSheet.addRule(".test .passed {background-color: #88ee88;}");
        styleSheet.addRule(".test .skipped {background-color: #ffff77;}");
        styleSheet.addRule(".test .failed {background-color: #ff8888;}");
        styleSheet.addRule(".group {background-color: #cccccc7a; color: #000000; font-weight: bold;}");
        styleSheet.addRule(".suiteLinks {float: right; font-weight: normal; vertical-align: middle;}");
        styleSheet.addRule(".suiteLinks a {color: #ffffff; margin-left: .5em;}");
        styleSheet.addRule(".passRate {font-weight: bold; text-align: right;}");
        styleSheet.addRule(".duration {text-align: right;}");
        styleSheet.addRule(".thread {white-space: nowrap;}");
        styleSheet.addRule(".resultsTable {border: 0; width: 100%; margin-top: 1.8em; line-height: 1.7em; border-spacing: 0.1em;}");
        styleSheet.addRule(".resultsTable .method {width: 18em;}");
        styleSheet.addRule(".resultsTable .duration {width: 6em;}");
        styleSheet.addRule(".resultsTable td {vertical-align: top; padding: 0 1em;}");
        styleSheet.addRule(".resultsTable th {padding: 0 .5em;}");
        styleSheet.addRule(".number {text-align: right;}");
        styleSheet.addRule(".zero {font-weight: normal;}");
        styleSheet.addRule(".columnHeadings {font-size: 1.2em; text-align: center;}");
        styleSheet.addRule(".columnHeadings th {font-weight: normal; text-align: center;}");
        styleSheet.addRule(".configTable {border: 1px solid #800000; color: #800000; margin-bottom: 1.5em;}");
        styleSheet.addRule("#sidebarHeader {padding: 1.8em 1em; margin: 0 -1em 1.8em -1em;}");
        styleSheet.addRule("#suites {line-height: 1.7em; border-spacing: 0.1em; width: 100%;}");
        styleSheet.addRule(".tests {display: table-row-group;}");
        styleSheet.addRule(".header.suite {cursor: pointer; clear: right; height: 1.214em; margin-top: 1px;}");
        styleSheet.addRule("div.test {margin-top: 0.1em; clear: right; font-size: 1.8em;}");
        /* The +/- toggle used in the navigation frame. */
        styleSheet.addRule(".toggle {font-family: monospace; font-weight: bold; padding-left: 2px; padding-right: 5px; color: #777777;}");
        styleSheet.addRule(".successIndicator {float: right; font-family: monospace; font-weight: bold; padding-right: 2px; color: #44aa44;}");
        styleSheet.addRule(".skipIndicator {float: right; font-family: monospace; font-weight: bold; padding-right: 2px; color: #ffaa00;}");
        styleSheet.addRule(".failureIndicator {float: right; font-family: monospace; font-weight: bold; padding-right: 2px; color: #ff4444;}");
        /* These classes are for information about an individual test result. */
        styleSheet.addRule(".result {font-size: 1.1em; vertical-align: middle;}");
        styleSheet.addRule(".dependency {font-family: Lucida Console, Monaco, Courier New, monospace; font-weight: bold;}");
        styleSheet.addRule(".arguments {font-family: Lucida Console, Monaco, Courier New, monospace; font-weight: bold;}");
        styleSheet.addRule(".testOutput {font-family: Lucida Console, Monaco, Courier New, monospace; color: #666666;}");
        styleSheet.addRule(".stackTrace {font-size: 0.9em; line-height: 1.2em; margin-left: 2em; display: none;}");
        styleSheet.addRule(".stackTrace .stackTrace {font-size: inherit;}");
        styleSheet.addRule(".description {border-bottom: 1px dotted #006699;}");
        styleSheet.addRule("#meta {font-size: 1.1em; text-align: right; float: right;}");
        styleSheet.addRule("#systemInfo {color: #666666;}");
        /* Report er log output (individual test ouput is style by "testOutput" above). */
        styleSheet.addRule("#log {font-family: Lucida Console, Monaco, Courier New, monospace; font-size: 1.8em; margin-top: 1.8em;}");
        styleSheet.addRule(".overviewTable {width: 100%; margin-top: 1.8em; line-height: 1.7em; border-spacing: 0.1em;}");
        styleSheet.addRule(".overviewTable tr {height: 1.6em;}");
        styleSheet.addRule(".overviewTable td {padding: 0 1em;}");
        styleSheet.addRule(".overviewTable th {padding: 0 .5em;}");
        styleSheet.addRule(".overviewTable .duration {width: 6em;}");
        styleSheet.addRule(".overviewTable .passRate {width: 6em;}");
        styleSheet.addRule(".overviewTable .number {width: 5em;}");

        return styleSheet;
    }

    /**
     * Generate base64 image out of html
     *
     * @param htmlString The html to convert
     * @return base64 string representing image
     */
    public static String htmlToBase64(String htmlString, int width, int height, String filePath) throws IOException {

        if (htmlString.contains("<body>")) {
            htmlString = htmlString
                    .substring(htmlString.indexOf("<body>") + 7, htmlString.indexOf("</body>"));
            System.out.println(htmlString);
        }

        // html editor + css
        JEditorPane jp = new JEditorPane("text/html", htmlString);
        jp.setEditable(false);
        jp.validate();

        HTMLEditorKit kit = new HTMLEditorKit();
        kit.setStyleSheet(styleSheet());
        Document doc = kit.createDefaultDocument();

        jp.setEditorKit(kit);
        jp.setDocument(doc);
        jp.setText(htmlString);
        jp.setSize(width, height);

        BufferedImage saveimg = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        Graphics2D g2draw = saveimg.createGraphics();
        g2draw.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);
        g2draw.setRenderingHint(RenderingHints.KEY_RENDERING,
                RenderingHints.VALUE_RENDER_QUALITY);
        g2draw.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,
                RenderingHints.VALUE_STROKE_PURE);
        jp.paint(g2draw);

        // manually for testing
        if (!Strings.isNullOrEmpty(filePath)) {
            ImageIO.write(saveimg, "png", new File(filePath));
        }

        return ImageToBase64.encodeToString(saveimg, "png");
    }
}
